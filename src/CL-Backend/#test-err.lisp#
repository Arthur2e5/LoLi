(define-condition my-error (error)
  ())

(define-condition my-err-not-found (my-error)
  ((err :initarg :err :reader err)
   (lst :initarg :lst :reader lst))
  (:report (lambda (condition stream)
             (format stream "Error ~A not found"
                     (err condition)))))

(defun my-restart (err lst)
    (restart-case
        (cerror "Item not found" 'my-err-not-found :err err :lst lst)
      (use-new-value (new-value)
        :report "New Value"
        :interactive read
        (judge new-value lst))))

(defun my-handler (condition)
  (when (typep condition 'my-error)
    (my-restart (err condition) (lst condition))))

(defun judge (x lst)
  (handler-bind ((my-err-not-found #'my-handler))
    (if (member x lst)
        t
        (signal 'my-err-not-found :err x :lst lst))))

(defun pass (x lst)
  (if (and (typep x 'integer)
           (listp lst))
      (judge x lst)))

(defun main ()
  (let* ((x (read))
         (lst (read))
         (result (pass x lst)))
    (print result)))